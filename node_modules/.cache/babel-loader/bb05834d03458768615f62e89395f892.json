{"ast":null,"code":"let globalTitleAnimationRunning = false;\nlet globalTitleOpacity = 1;\nconst animationStartScrollHeight = 200;\n\nconst disappearAnimationRun = (isScrollRight, isAnimationFinished, startOpacity, stopOpacity, opacityOperator, elementId, endCallback) => {\n  const element = document.getElementById(elementId);\n  let opacity = startOpacity;\n\n  const frame = () => {\n    if (isScrollRight()) {\n      if (isAnimationFinished(opacity)) {\n        element.style.opacity = stopOpacity;\n        endCallback(parseInt(stopOpacity), false);\n        clearInterval(intervalID);\n      } else {\n        opacity += opacityOperator;\n        element.style.opacity = opacity;\n      }\n    } else {\n      element.style.opacity = stopOpacity;\n      endCallback(parseInt(stopOpacity), false);\n      clearInterval(intervalID);\n    }\n  };\n\n  const intervalID = setInterval(frame, 10);\n};\n/*\nFPS | divide | operator | interval-time-equation | interval-time\n\n10    |   10      |      1       |      1000 / operator       |       1000\n100  |   10      |      10     |      1000 / operator       |        100\n1000|   10      |      100   |      1000 / operator       |          10\n\nin = out\n1 = 1\n10 = 0.1\n100 = 0.01\n1000 = 0.001\n*/\n// dont forget to set globalAnimationRunning to true on start!\n\n\nconst disappearAnimation = (endCallBack, // set global opacity and animation running to some value\nglobalAnimationRunning, globalElementOpacity, reverseY, fps) => {\n  // state declaration\n  let state;\n\n  if (window.scrollY >= animationStartScrollHeight && !reverseY || window.scrollY < animationStartScrollHeight && reverseY) {\n    state = \"down\";\n  } else {\n    state = \"up\";\n  } // is animation already running\n\n\n  if (globalAnimationRunning) {\n    return;\n  } // is animation already finished on animation start\n\n\n  if (\"down\" === state) {\n    if (globalElementOpacity === 0) {\n      return;\n    }\n  } else {\n    if (globalElementOpacity === 1) {\n      return;\n    }\n  } // is scroll right function\n\n\n  let canAnimationContinueByState;\n\n  if (\"down\" === state && !reverseY || \"up\" === state && reverseY) {\n    canAnimationContinueByState = () => {\n      return window.scrollY >= animationStartScrollHeight;\n    };\n  } else {\n    canAnimationContinueByState = () => {\n      return window.scrollY < animationStartScrollHeight;\n    };\n  } // is animation finished check function\n\n\n  let isAnimationFinished;\n\n  if (\"down\" === state) {\n    isAnimationFinished = opacity => {\n      return opacity <= 0;\n    };\n  } else {\n    isAnimationFinished = opacity => {\n      return opacity >= 1;\n    };\n  } // start and stop opacity declaration\n\n\n  let startOpacity, stopOpacity;\n\n  if (\"down\" === state) {\n    startOpacity = 1;\n    stopOpacity = 0;\n  } else {\n    startOpacity = 0;\n    stopOpacity = 1;\n  } // opacity operator declaration\n\n\n  let opacityOperator;\n\n  if (\"down\" === state) {\n    opacityOperator = -0.01;\n  } else {\n    opacityOperator = 0.01;\n  } // animation start\n\n\n  disappearAnimationRun(canAnimationContinueByState, isAnimationFinished, startOpacity, stopOpacity, opacityOperator, \"title\", endCallBack);\n};\n\nconst startTitleAnimation = () => {\n  const callback = (opacity, animationRunning) => {\n    globalTitleOpacity = opacity;\n    globalTitleAnimationRunning = animationRunning;\n  };\n\n  disappearAnimation(callback, globalTitleAnimationRunning, globalTitleOpacity, false);\n};\n\nconst topButtonControl = () => {\n  const scroll = window.scrollY;\n  const toTopButton = document.getElementById(\"2top\");\n\n  if (scroll >= animationStartScrollHeight) {\n    toTopButton.style.display = \"block\";\n  } else {\n    toTopButton.style.display = \"none\";\n  }\n};\n\nwindow.onscroll = () => {\n  startTitleAnimation();\n  topButtonControl();\n};","map":{"version":3,"sources":["/mnt/38a90096-bca6-47f2-b23a-3885f42bfa67/Desktop/Coding/HTML/inf-website/master/src/script.js"],"names":["globalTitleAnimationRunning","globalTitleOpacity","animationStartScrollHeight","disappearAnimationRun","isScrollRight","isAnimationFinished","startOpacity","stopOpacity","opacityOperator","elementId","endCallback","element","document","getElementById","opacity","frame","style","parseInt","clearInterval","intervalID","setInterval","disappearAnimation","endCallBack","globalAnimationRunning","globalElementOpacity","reverseY","fps","state","window","scrollY","canAnimationContinueByState","startTitleAnimation","callback","animationRunning","topButtonControl","scroll","toTopButton","display","onscroll"],"mappings":"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","sourcesContent":["let globalTitleAnimationRunning = false;\nlet globalTitleOpacity = 1;\nconst animationStartScrollHeight = 200;\n\n\nconst disappearAnimationRun = ( \n    isScrollRight,\n    isAnimationFinished,\n    startOpacity,\n    stopOpacity,\n    opacityOperator,\n    elementId,\n    endCallback\n    ) => {\n    const element = document.getElementById(elementId);\n\n    let opacity = startOpacity;\n\n    const frame = () => {\n        if (isScrollRight()) {\n            if (isAnimationFinished(opacity)) {\n                element.style.opacity = stopOpacity;\n                endCallback(parseInt(stopOpacity), false);\n                clearInterval(intervalID);\n            } else {\n                opacity += opacityOperator;\n                element.style.opacity = opacity;\n            }\n        } else {\n            element.style.opacity = stopOpacity;\n            endCallback(parseInt(stopOpacity), false);\n            clearInterval(intervalID);\n        }\n    }\n\n    const intervalID = setInterval(frame, 10);\n}\n\n/*\nFPS | divide | operator | interval-time-equation | interval-time\n\n10    |   10      |      1       |      1000 / operator       |       1000\n100  |   10      |      10     |      1000 / operator       |        100\n1000|   10      |      100   |      1000 / operator       |          10\n\nin = out\n1 = 1\n10 = 0.1\n100 = 0.01\n1000 = 0.001\n*/\n\n// dont forget to set globalAnimationRunning to true on start!\nconst disappearAnimation = (\n    endCallBack, // set global opacity and animation running to some value\n    globalAnimationRunning,\n    globalElementOpacity,\n    reverseY,\n    fps\n    ) => {\n\n    // state declaration\n    let state;\n    if ((window.scrollY >= animationStartScrollHeight && !reverseY) || (window.scrollY < animationStartScrollHeight && reverseY)) {\n        state = \"down\";\n    }\n    else {\n        state = \"up\"\n    }\n\n    // is animation already running\n    if (globalAnimationRunning) {\n        return;\n    }\n\n    // is animation already finished on animation start\n    if (\"down\" === state) {\n        if (globalElementOpacity === 0) {\n            return;\n        }\n    }\n    else {\n        if (globalElementOpacity === 1) {\n            return;\n        }\n    }\n\n    // is scroll right function\n    let canAnimationContinueByState;\n    if ((\"down\" === state && !reverseY) || (\"up\" === state && reverseY)) {\n        canAnimationContinueByState = () => {\n            return window.scrollY >= animationStartScrollHeight;\n        }\n    }\n    else {\n        canAnimationContinueByState = () => {\n            return window.scrollY < animationStartScrollHeight;\n        }\n    }\n\n    // is animation finished check function\n    let isAnimationFinished;\n    if (\"down\" === state) {\n        isAnimationFinished = ( opacity ) => {\n            return opacity <= 0;\n        }\n    }\n    else {\n        isAnimationFinished = ( opacity ) => {\n            return opacity >= 1;\n        }\n    }\n\n    // start and stop opacity declaration\n    let startOpacity, stopOpacity;\n    if (\"down\" === state) {\n        startOpacity = 1;\n        stopOpacity = 0;\n    }\n    else {\n        startOpacity = 0;\n        stopOpacity = 1;\n    }\n\n    // opacity operator declaration\n    let opacityOperator;\n    if (\"down\" === state) {\n        opacityOperator = -0.01\n    }\n    else {\n        opacityOperator = 0.01\n    }\n\n    // animation start\n    disappearAnimationRun(\n        canAnimationContinueByState,\n        isAnimationFinished,\n        startOpacity,\n        stopOpacity,\n        opacityOperator,\n        \"title\",\n        endCallBack\n    )\n}\n\n\nconst startTitleAnimation = () => {\n    const callback = ( opacity, animationRunning ) => {\n        globalTitleOpacity = opacity;\n        globalTitleAnimationRunning = animationRunning;\n    }\n\n    disappearAnimation(\n        callback,\n        globalTitleAnimationRunning,\n        globalTitleOpacity,\n        false\n    )\n}\n\n\nconst topButtonControl = () => {\n    const scroll = window.scrollY;\n    const toTopButton = document.getElementById(\"2top\")\n\n    if (scroll >= animationStartScrollHeight) {\n        toTopButton.style.display = \"block\";\n    } else {\n        toTopButton.style.display = \"none\"\n    }\n}\n\n\nwindow.onscroll = () => {\n    startTitleAnimation();\n    topButtonControl();\n}\n"]},"metadata":{},"sourceType":"module"}