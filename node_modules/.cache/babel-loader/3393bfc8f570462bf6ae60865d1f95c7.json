{"ast":null,"code":"let globalTitleAnimationRunning = false;\nlet globalTitleOpacity = 1;\nconst animationStartScrollHeight = 200;\n\nconst fpsToOperator = fps => {\n  if (fps === 1) {\n    return 1;\n  } else if (fps === 10) {\n    return 0.1;\n  } else if (fps === 100) {\n    return 0.01;\n  } else if (fps === 1000) {\n    return 0.001;\n  }\n};\n\nconst fpsToTime = fps => {\n  if (fps === 1) {\n    return 1000;\n  } else if (fps === 10) {\n    return 100;\n  } else if (fps === 100) {\n    return 10;\n  } else if (fps === 1000) {\n    return 1;\n  }\n};\n\nconst disappearAnimationRun = (isScrollRight, isAnimationFinished, startOpacity, stopOpacity, opacityOperator, elementId, endCallback, between_frame_time) => {\n  const element = document.getElementById(elementId);\n  let opacity = startOpacity;\n\n  const frame = () => {\n    if (isScrollRight()) {\n      if (isAnimationFinished(opacity)) {\n        element.style.opacity = stopOpacity;\n        endCallback(parseInt(stopOpacity), false);\n        clearInterval(intervalID);\n      } else {\n        opacity += opacityOperator;\n        element.style.opacity = opacity;\n      }\n    } else {\n      element.style.opacity = stopOpacity;\n      endCallback(parseInt(stopOpacity), false);\n      clearInterval(intervalID);\n    }\n  };\n\n  const intervalID = setInterval(frame, between_frame_time);\n}; // dont forget to set globalAnimationRunning to true on start!\n\n\nconst disappearAnimation = (endCallBack, // set global opacity and animation running to some value\nglobalElementOpacity, reverseY, fps) => {\n  // state declaration\n  let state;\n\n  if (window.scrollY >= animationStartScrollHeight && !reverseY || window.scrollY < animationStartScrollHeight && reverseY) {\n    state = \"down\";\n  } else {\n    state = \"up\";\n  } // is animation already finished on animation start\n\n\n  if (\"down\" === state) {\n    if (globalElementOpacity === 0) {\n      console.log(\"already done\");\n      endCallBack(0, false);\n      return;\n    }\n  } else {\n    if (globalElementOpacity === 1) {\n      console.log(\"already done\");\n      endCallBack(1, false);\n      return;\n    }\n  } // is scroll right function\n\n\n  let canAnimationContinueByState;\n\n  if (\"down\" === state && !reverseY || \"up\" === state && reverseY) {\n    canAnimationContinueByState = () => {\n      return window.scrollY >= animationStartScrollHeight;\n    };\n  } else {\n    canAnimationContinueByState = () => {\n      return window.scrollY < animationStartScrollHeight;\n    };\n  } // is animation finished check function\n\n\n  let isAnimationFinished;\n\n  if (\"down\" === state) {\n    isAnimationFinished = opacity => {\n      return opacity <= 0;\n    };\n  } else {\n    isAnimationFinished = opacity => {\n      return opacity >= 1;\n    };\n  } // start and stop opacity declaration\n\n\n  let startOpacity, stopOpacity;\n\n  if (\"down\" === state) {\n    startOpacity = 1;\n    stopOpacity = 0;\n  } else {\n    startOpacity = 0;\n    stopOpacity = 1;\n  } // opacity operator declaration\n\n\n  let opacityOperator;\n\n  if (\"down\" === state) {\n    opacityOperator = -fpsToOperator(fps);\n  } else {\n    opacityOperator = fpsToOperator(fps);\n  } // animation start\n\n\n  disappearAnimationRun(canAnimationContinueByState, isAnimationFinished, startOpacity, stopOpacity, opacityOperator, \"title\", endCallBack, fpsToTime(fps));\n};\n\nconst startTitleAnimation = () => {\n  const callback = (opacity, animationRunning) => {\n    globalTitleOpacity = opacity;\n    globalTitleAnimationRunning = animationRunning;\n  };\n\n  if (!globalTitleAnimationRunning) {\n    globalTitleAnimationRunning = true;\n    disappearAnimation(callback, globalTitleOpacity, false, 100);\n  }\n};\n\nconst topButtonControl = () => {\n  const scroll = window.scrollY;\n  const toTopButton = document.getElementById(\"2top\");\n\n  if (scroll >= animationStartScrollHeight) {\n    toTopButton.style.display = \"block\";\n  } else {\n    toTopButton.style.display = \"none\";\n  }\n};\n\nwindow.onscroll = () => {\n  startTitleAnimation();\n  topButtonControl();\n};","map":{"version":3,"sources":["/mnt/38a90096-bca6-47f2-b23a-3885f42bfa67/Desktop/Coding/HTML/inf-website/master/src/script.js"],"names":["globalTitleAnimationRunning","globalTitleOpacity","animationStartScrollHeight","fpsToOperator","fps","fpsToTime","disappearAnimationRun","isScrollRight","isAnimationFinished","startOpacity","stopOpacity","opacityOperator","elementId","endCallback","between_frame_time","element","document","getElementById","opacity","frame","style","parseInt","clearInterval","intervalID","setInterval","disappearAnimation","endCallBack","globalElementOpacity","reverseY","state","window","scrollY","console","log","canAnimationContinueByState","startTitleAnimation","callback","animationRunning","topButtonControl","scroll","toTopButton","display","onscroll"],"mappings":"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","sourcesContent":["let globalTitleAnimationRunning = false;\nlet globalTitleOpacity = 1;\nconst animationStartScrollHeight = 200;\n\n\nconst fpsToOperator = (fps ) => {\n    if (fps === 1) {\n        return 1;\n    }\n    else if (fps === 10) {\n        return 0.1;\n    }\n    else if (fps === 100) {\n        return 0.01;\n    }\n    else if (fps === 1000) {\n        return 0.001;\n    }\n}\n\nconst fpsToTime = ( fps ) => {\n    if (fps === 1) {\n        return 1000;\n    }\n    else if (fps === 10) {\n        return 100;\n    }\n    else if (fps === 100) {\n        return 10;\n    }\n    else if (fps === 1000) {\n        return 1;\n    }\n}\n\n\nconst disappearAnimationRun = ( \n    isScrollRight,\n    isAnimationFinished,\n    startOpacity,\n    stopOpacity,\n    opacityOperator,\n    elementId,\n    endCallback,\n    between_frame_time\n    ) => {\n    const element = document.getElementById(elementId);\n\n    let opacity = startOpacity;\n\n    const frame = () => {\n        if (isScrollRight()) {\n            if (isAnimationFinished(opacity)) {\n                element.style.opacity = stopOpacity;\n                endCallback(parseInt(stopOpacity), false);\n                clearInterval(intervalID);\n            } else {\n                opacity += opacityOperator;\n                element.style.opacity = opacity;\n            }\n        } else {\n            element.style.opacity = stopOpacity;\n            endCallback(parseInt(stopOpacity), false);\n            clearInterval(intervalID);\n        }\n    }\n\n    const intervalID = setInterval(frame, between_frame_time);\n}\n\n// dont forget to set globalAnimationRunning to true on start!\nconst disappearAnimation = (\n    endCallBack, // set global opacity and animation running to some value\n    globalElementOpacity,\n    reverseY,\n    fps\n    ) => {\n\n    // state declaration\n    let state;\n    if ((window.scrollY >= animationStartScrollHeight && !reverseY) || (window.scrollY < animationStartScrollHeight && reverseY)) {\n        state = \"down\";\n    }\n    else {\n        state = \"up\"\n    }\n\n    // is animation already finished on animation start\n    if (\"down\" === state) {\n        if (globalElementOpacity === 0) {\n            console.log(\"already done\")\n            endCallBack( 0, false )\n            return;\n        }\n    }\n    else {\n        if (globalElementOpacity === 1) {\n            console.log(\"already done\")\n            endCallBack( 1, false )\n            return;\n        }\n    }\n\n    // is scroll right function\n    let canAnimationContinueByState;\n    if ((\"down\" === state && !reverseY) || (\"up\" === state && reverseY)) {\n        canAnimationContinueByState = () => {\n            return window.scrollY >= animationStartScrollHeight;\n        }\n    }\n    else {\n        canAnimationContinueByState = () => {\n            return window.scrollY < animationStartScrollHeight;\n        }\n    }\n\n    // is animation finished check function\n    let isAnimationFinished;\n    if (\"down\" === state) {\n        isAnimationFinished = ( opacity ) => {\n            return opacity <= 0;\n        }\n    }\n    else {\n        isAnimationFinished = ( opacity ) => {\n            return opacity >= 1;\n        }\n    }\n\n    // start and stop opacity declaration\n    let startOpacity, stopOpacity;\n    if (\"down\" === state) {\n        startOpacity = 1;\n        stopOpacity = 0;\n    }\n    else {\n        startOpacity = 0;\n        stopOpacity = 1;\n    }\n\n    // opacity operator declaration\n    let opacityOperator;\n    if (\"down\" === state) {\n        opacityOperator = -fpsToOperator(fps);\n    }\n    else {\n        opacityOperator = fpsToOperator(fps);\n    }\n\n    // animation start\n    disappearAnimationRun(\n        canAnimationContinueByState,\n        isAnimationFinished,\n        startOpacity,\n        stopOpacity,\n        opacityOperator,\n        \"title\",\n        endCallBack,\n        fpsToTime(fps)\n    )\n}\n\n\nconst startTitleAnimation = () => {\n    const callback = ( opacity, animationRunning ) => {\n        globalTitleOpacity = opacity;\n        globalTitleAnimationRunning = animationRunning;\n    }\n\n    if (!globalTitleAnimationRunning) {\n        globalTitleAnimationRunning = true;\n        disappearAnimation(\n            callback,\n            globalTitleOpacity,\n            false,\n            100\n        )\n    }\n}\n\n\nconst topButtonControl = () => {\n    const scroll = window.scrollY;\n    const toTopButton = document.getElementById(\"2top\")\n\n    if (scroll >= animationStartScrollHeight) {\n        toTopButton.style.display = \"block\";\n    } else {\n        toTopButton.style.display = \"none\"\n    }\n}\n\n\nwindow.onscroll = () => {\n    startTitleAnimation();\n    topButtonControl();\n}\n"]},"metadata":{},"sourceType":"module"}